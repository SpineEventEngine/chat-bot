/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

// This file contains the proto definitions that conform to the
// <a href="https://developers.google.com/hangouts/chat/reference/message-formats/events">
// event formats</a> of the <a href="https://developers.google.com/hangouts/chat">Hangouts Chat</a>.
//
// The layout of types and fields make them compatible with the Travis JSON output.
// This way we don't have to create custom conversion.
//

package spine.chatbot.google.chat.incoming;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io.chatbot";
option java_package = "io.spine.chatbot.google.chat.incoming";
option java_outer_classname = "IncomingChatMessagesProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

// An incoming Chat event.
//
// The definition conforms to the JSON representation defined in the
// <a href="https://developers.google.com/hangouts/chat/reference/rest/v1/Event"reference<a/>.
//
message ChatEvent {

    // The type of the event
    EventType type = 1 [(required) = true];

    // The timestamp indicating when the event was dispatched.
    string event_time = 2 [(required) = true];

    // A secret value that bots can use to verify if a request is from Google.
    //
    // The token is randomly generated by Google, remains static, and can be obtained from
    // the Chat API configuration page in the Cloud Console. Developers can revoke/regenerate
    // it if needed from the same page.
    //
    string token = 3;

    // The bot-defined key for the thread related to the event.
    string thread_key = 4;

    // The room or DM in which the event occurred.
    Space space = 5;

    // The message that triggered the event, if applicable.
    Message message = 6;

    // The user that triggered the event.
    User user = 7 [(required) = true];
}

// A message in Chat.
//
// See <a href="https://developers.google.com/hangouts/chat/reference/rest/v1/spaces.messages#Message">
// reference</a> declaration for more details.
//
message Message {

    // The resource name, in the form "spaces/*/messages/*".
    string name = 1 [(required) = true, (pattern).regex = "spaces/.+/messages/.+"];

    // The user who created the message.
    User sender = 2;

    // The time at which the message was created in Hangouts Chat server.
    string create_time = 3;

    // The plain-text body of the message.
    string text = 4;

    // The plain-text body of the message with all bot mentions stripped out.
    string argument_text = 5;

    // The thread the message belongs to.
    Thread thread = 6;

    // Annotations associated with the text in this message.
    repeated Annotation annotations = 7;
}

// Annotation metadata of the message.
message Annotation {

    // The length of the substring in the plain-text message body this annotation corresponds to.
    uint32 length = 1;

    // The start index (0-based, inclusive) in the plain-text message body this annotation
    // corresponds to.
    //
    uint32 start_index = 2;

    // The metadata of user mention.
    UserMention user_mention = 3;

    // The type of the annotation.
    string type = 4;
}

// Annotation metadata for user mentions (@).
message UserMention {

    // The type of user mention.
    string type = 1;

    // The user mentioned.
    User user = 2;
}

// A thread in Chat.
message Thread {

    // Resource name, in the form "spaces/*/threads/*".
    string name = 1 [(required) = true, (pattern).regex = "spaces/.+/threads/.+"];
}

// A room or DM in Chat.
//
// See <a href="https://developers.google.com/hangouts/chat/reference/rest/v1/spaces#Space">
// reference</a> declaration for more details.
//
message Space {

    option (is).java_type = "io.spine.chatbot.server.google.chat.incoming.SpaceMixin";

    // The resource name of the space, in the form "spaces/*".
    string name = 1 [(required) = true, (pattern).regex = "spaces/.+"];

    // The display name (only if the space is a room).
    string display_name = 2;

    // The type of a space
    SpaceType type = 3;
}

// A user in Chat.
//
// See <a href="https://developers.google.com/hangouts/chat/reference/rest/v1/User">reference</a>
// declaration for more details.
//
message User {

    // The resource name, in the format "users/*".
    string name = 1 [(required) = true, (pattern).regex = "users/.+"];

    // The user's display name.
    string displayName = 2;

    // The user's avatar URL.
    string avatarUrl = 3;

    // The user's email.
    string email = 4;

    // The user's type.
    string type = 5;
}

// The type of a space.
enum SpaceType {

    ST_UNKNOWN = 0;

    // Multi-user spaces such as rooms and DMs between humans.
    ROOM = 1;

    // 1:1 Direct Message between a human and a bot, where all messages are flat.
    DM = 2;
}

// The type of the event the bot is receiving.
//
// See <a href="https://developers.google.com/hangouts/chat/reference/rest/v1/EventType">reference</a>
// declaration for more details.
//
enum EventType {

    ET_UNKNOWN = 0;

    // A message was sent in a room or direct message.
    MESSAGE = 1;

    // The bot was added to a room or DM.
    ADDED_TO_SPACE = 2;

    // The bot was removed from a room or DM.
    REMOVED_FROM_SPACE = 3;

    // The bot's interactive card was clicked.
    CARD_CLICKED = 4;
}
