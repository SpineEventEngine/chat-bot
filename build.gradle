plugins {
    id "net.ltgt.apt" version "0.21" apply false
    id "com.github.johnrengelman.shadow" version "5.2.0" apply false
    id 'com.google.cloud.tools.jib' version '2.3.0' apply false
    id "net.saliman.properties" version "1.5.1" apply false
    id 'io.spine.tools.gradle.bootstrap' version '1.5.8' apply false
    id "net.ltgt.errorprone" version "1.1.1" apply false
}

allprojects {
    version "0.1"
    group "io.spine"
    apply plugin: "idea"
    apply plugin: "net.saliman.properties"
}

subprojects {
    apply plugin: "net.ltgt.apt-idea"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "application"
    apply plugin: "com.google.cloud.tools.jib"
    apply plugin: "net.ltgt.errorprone"

    repositories {
        jcenter()
        mavenCentral()
    }
    configurations {
        // for dependencies that are needed for development only
        developmentOnly
        invoker
    }

    dependencies {
        errorprone "com.google.errorprone:error_prone_core:2.3.4"
        annotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
        annotationProcessor("io.micronaut:micronaut-inject-java")
        annotationProcessor("io.micronaut:micronaut-validation")

        compileOnly(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))

        implementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
        implementation("io.micronaut:micronaut-inject")
        implementation("io.micronaut:micronaut-validation")
        implementation("io.micronaut:micronaut-runtime")
        implementation("com.google.guava:guava:29.0-jre")

        implementation "io.micronaut:micronaut-http-server-netty"
        implementation("javax.annotation:javax.annotation-api")

        implementation("org.apache.logging.log4j:log4j-core:2.13.3")
        runtimeOnly("org.apache.logging.log4j:log4j-api:2.13.3")
        runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.13.3")

        testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
        testAnnotationProcessor("io.micronaut:micronaut-inject-java")
        testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
        testImplementation("io.micronaut:micronaut-http-client")
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("io.micronaut.test:micronaut-test-junit5")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    test.classpath += configurations.developmentOnly

    mainClassName = "io.spine.chatbot.Application"

    test {
        useJUnitPlatform()
    }

    java {
        sourceCompatibility = JavaVersion.toVersion('11')
        targetCompatibility = JavaVersion.toVersion('11')
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs.add('-parameters')
    }

    tasks.withType(JavaExec) {
        classpath += configurations.developmentOnly
        jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    }

    shadowJar {
        minimize()
        mergeServiceFiles()
    }
}